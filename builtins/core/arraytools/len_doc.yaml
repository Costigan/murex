- DocumentID: len
  Title: >-
    `len` 
  CategoryID: commands
  Summary: >-
    Outputs the length of an array
  Description: |-
    This will read an array from STDIN and outputs the length for that array
  Usage: |-
    ```
    <STDIN> -> len -> <stdout>
    ```
  Examples: |-
    ```
    » tout: json (["a", "b", "c"]) -> len 
    3
    ```
  Detail: |-
    Please note that this returns the length of the _array_ rather than string.
    For example `out "foobar" -> len` would return `1` because an array in the
    `str` data type would be new line separated (eg `out "foo\nbar" -> len`
    would return `2`). If you need to count characters in a string and are
    running POSIX (eg Linux / BSD / OSX) then it is recommended to use `wc`
    instead. But be mindful that `wc` will also count new line characters

    ```
    » out: "foobar" -> len
    1

    » out: "foo\nbar" -> len
    2

    » out: "foobar" -> wc: -c
    7

    » out: "foo\nbar" -> wc: -c
    8

    » printf: "foobar" -> wc: -c
    6
    # (printf does not print a trailing new line)
    ```

  Synonyms:
  Related:
  - prepend
  - append
  - map
  - a
  - ja
  - jsplit
  - index
  - element
  - range
  - mtac
  - msort
