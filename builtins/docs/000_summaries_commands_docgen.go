package docs

func init() {
	Summary = map[string]string{

		"(":               "Write a string to the STDOUT without new line",
		"2darray":         "Create a 2D JSON array from multiple input sources",
		">>":              "Writes STDIN to disk - appending contents if file already exists",
		">":               "Writes STDIN to disk - overwriting contents if file already exists",
		"alter":           "Change a value within a structured data-type and pass that change along the pipeline without altering the original source input",
		"and":             "Returns `true` or `false` depending on whether multiple conditions are met",
		"append":          "Add data to the end of an array",
		"catch":           "Handles the exception code raised by `try` or `trypipe",
		"err":             "Print a line to the STDERR",
		"export":          "Define a local variable and set it's value",
		"f":               "Lists objects (eg files) in the current working directory",
		"g":               "Glob pattern matching for file system objects (eg *.txt)",
		"get":             "Makes a standard HTTP request and returns the result as a JSON object",
		"getfile":         "Makes a standard HTTP request and return the contents as _murex_-aware data type for passing along _murex_ pipelines.",
		"global":          "Define a global variable and set it's value",
		"if":              "Conditional statement to execute different blocks of code depending on the result of the condition",
		"jsplit":          "Splits STDIN into a JSON array based on a regex parameter",
		"len":             "Outputs the length of an array",
		"map":             "Creates a map from two data sources",
		"murex-docs":      "Displays the man pages for _murex_ builtins",
		"or":              "Returns `true` or `false` depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.",
		"out":             "`echo` a string to the STDOUT with a trailing new line character",
		"post":            "HTTP POST request with a JSON-parsable return",
		"prepend":         "Add data to the start of an array",
		"pt":              "Pipe telemetry. Writes data-types and bytes written",
		"read":            "`read` a line of input from the user and store as a variable",
		"rx":              "Regexp pattern matching for file system objects (eg '.*\\.txt')",
		"set":             "Define a local variable and set it's value",
		"swivel-datatype": "Converts tabulated data into a map of values for serialised data-types such as JSON and YAML",
		"swivel-table":    "Rotates a table by 90 degrees",
		"tout":            "Print a string to the STDOUT and set it's data-type",
		"tread":           "`read` a line of input from the user and store as a user defined *typed* variable",
		"try":             "Handles errors inside a block of code",
		"trypipe":         "Checks state of each function in a pipeline and exits block on error",
	}

	Synonym = map[string]string{

		"(":               "(",
		"2darray":         "2darray",
		">>":              ">>",
		">":               ">",
		"alter":           "alter",
		"and":             "and",
		"!and":            "and",
		"append":          "append",
		"catch":           "catch",
		"!catch":          "catch",
		"err":             "err",
		"export":          "export",
		"!export":         "export",
		"unset":           "export",
		"f":               "f",
		"g":               "g",
		"get":             "get",
		"getfile":         "getfile",
		"global":          "global",
		"!global":         "global",
		"if":              "if",
		"!if":             "if",
		"jsplit":          "jsplit",
		"len":             "len",
		"map":             "map",
		"murex-docs":      "murex-docs",
		"or":              "or",
		"!or":             "or",
		"out":             "out",
		"echo":            "out",
		"post":            "post",
		"prepend":         "prepend",
		"pt":              "pt",
		"read":            "read",
		"rx":              "rx",
		"set":             "set",
		"!set":            "set",
		"swivel-datatype": "swivel-datatype",
		"swivel-table":    "swivel-table",
		"tout":            "tout",
		"tread":           "tread",
		"try":             "try",
		"trypipe":         "trypipe",
	}
}
