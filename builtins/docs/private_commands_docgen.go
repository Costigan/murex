package docs

func init() {

	Definition["private"] = "# _murex_ Language Guide\n\n## Command Reference: `private`\n\n> Define a private function block\n\n### Description\n\n`private` defines a function who's scope is limited to that module or source\nfile.\n\nPrivates cannot be called from one module to another (unless they're wrapped\naround a global `function`) and nor can they be called from the interactive\ncommand line. The purpose of a `private` is to reduce repeated code inside\na module or source file without cluttering up the global namespace.\n\n### Usage\n\n    private: name { code-block }\n\n### Examples\n\n    # The following cannot be entered via the command line. You need to write\n    # it to a file and execute it from there.\n    \n    private hw {\n        out \"Hello, World!\"\n    }\n    \n    function tom {\n        hw\n        out \"My name is Tom.\"\n    }\n    \n    function dick {\n        hw\n        out \"My name is Dick.\"\n    }\n    \n    function harry {\n        hw\n        out \"My name is Harry.\"\n    }\n\n### Detail\n\n#### Allowed characters\n\nPrivate names can only include any characters apart from dollar (`$`).\nThis is to prevent functions from overwriting variables (see the order of\npreference below).\n\n#### Undefining a private\n\nBecause private functions are fixed to the source file that declares them,\nthere isn't much point in undefining them. Thus at this point in time, it\nis not possible to do so.\n\n#### Order of preferece\n\nThere is an order of preference for which commands are looked up:\n1. aliases (all aliases are global)\n2. murex functions (all `functions`s are global)\n3. private functions (`privates` cannot be global and are scoped only to\n   the module or source that defined them. You cannot call a private\n   function from the interactive command line)\n4. variables (dollar prefixed)\n5. auto-globbing prefix: `@g`\n6. murex builtins\n7. external executables\n\n### See Also\n\n* [`alias`](../commands/alias.md):\n  Create an alias for a command\n* [`export`](../commands/export.md):\n  Define a local variable and set it's value\n* [`function`](../commands/function.md):\n  Define a function block\n* [`g`](../commands/g.md):\n  Glob pattern matching for file system objects (eg *.txt)\n* [`global`](../commands/global.md):\n  Define a global variable and set it's value\n* [`private`](../commands/private.md):\n  Define a private function block\n* [`set`](../commands/set.md):\n  Define a local variable and set it's value\n* [source](../commands/source.md):\n  "

}
