package docs

func init() {

	Definition["switch"] = "# _murex_ Shell Docs\n\n## Command Reference: `switch`\n\n> Blocks of cascading conditionals\n\n## Description\n\n`switch` is a large block for simplifying cascades of conditional statements.\n\n## Usage\n\n    switch {\n      case | if { conditional } then { code-block }\n      case | if { conditional } then { code-block }\n      ...\n      [ catch { code-block } ]\n    } -> <stdout>\n\n## Examples\n\nOutput an array of editors installed\n\n    switch {\n      if { which: vim   } { out: vim   }\n      if { which: vi    } { out: vi    }\n      if { which: nano  } { out: nano  }\n      if { which: emacs } { out: emacs }\n    } -> format: json\n    \n    function higherlower {\n      try {\n        rand: int 100 -> set rand\n        while { $rand } {\n          read: guess \"Guess a number between 1 and 100: \"\n    \n          switch {\n            case: { = $guess < $rand } then {\n              out: \"Too low\"\n            }\n    \n            case: { = $guess > $rand } then {\n              out: \"Too high\"\n            }\n    \n            catch: {\n              out: \"Correct\"\n              let: rand=0\n            }\n          }\n        }\n      }\n    }\n\n## See Also\n\n* [commands/`!` (not)](../commands/not.md):\n  Reads the STDIN and exit number from previous process and not's it's condition\n* [commands/`and`](../commands/and.md):\n  Returns `true` or `false` depending on whether multiple conditions are met\n* [commands/`catch`](../commands/catch.md):\n  Handles the exception code raised by `try` or `trypipe` \n* [commands/`false`](../commands/false.md):\n  Returns a `false` value\n* [commands/`if`](../commands/if.md):\n  Conditional statement to execute different blocks of code depending on the result of the condition\n* [commands/`let`](../commands/let.md):\n  Evaluate a mathematical function and assign to variable\n* [commands/`or`](../commands/or.md):\n  Returns `true` or `false` depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\n* [commands/`set`](../commands/set.md):\n  Define a local variable and set it's value\n* [commands/`true`](../commands/true.md):\n  Returns a `true` value\n* [commands/`try`](../commands/try.md):\n  Handles errors inside a block of code\n* [commands/`trypipe`](../commands/trypipe.md):\n  Checks state of each function in a pipeline and exits block on error\n* [commands/`while`](../commands/while.md):\n  Loop until condition false"

}
