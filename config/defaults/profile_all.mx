function h {
    # Output the murex history log in a human readable format
    history -> foreach { -> set json line; out "$line[Index]: $line[Block]" } -> cast *
}

function aliases {
	# Output the aliases in human readable format
	runtime: --aliases -> formap name alias {
        $name -> sprintf: "%10s => ${esccli @alias}\n"
	} -> cast str
}

test unit function aliases {
    "PreBlock": ({
        alias ALIAS_UNIT_TEST=example param1 param2 param3
    }),
    "StdoutRegex": "([- _0-9a-zA-Z]+ => .*?\n)+",
    "StdoutType": "str",
    "PostBlock": ({
        !alias ALIAS_UNIT_TEST
    })
}

autocomplete set cd { [{
    "IncDirs": true
}] }

autocomplete set mkdir { [{
    "IncDirs": true,
    "AllowMultiple": true
}] }

autocomplete set rmdir { [{
    "IncDirs": true,
    "AllowMultiple": true
}] }

autocomplete set exec { [
    {
        "IncFiles": true,
        "IncDirs": true,
        "IncExePath": true
    },
    {
        "NestedCommand": true
    }
] }

autocomplete set format { [{
    "Dynamic": ({ runtime: --marshallers })
}] }

autocomplete set swivel-datatype { [{
    "Dynamic": ({ runtime: --marshallers })
}] }

private autocomplete.data-types {
    runtime: --readarray -> format: str
    runtime: --writearray -> format: str
    runtime: --readmap -> format: str
    runtime: --marshallers -> format: str
    runtime: --unmarshallers -> format: str
}

test unit private autocomplete.data-types {
    "StdoutRegex": (^(([a-z0-9]+|\*)\n)+),
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    })
}

autocomplete set cast { [{
    "Dynamic": ({ autocomplete.data-types })
}] }

autocomplete set tout { [{
    "Dynamic": ({ autocomplete.data-types })
}] }

autocomplete set set { [{
    "Dynamic": ({ autocomplete.data-types })
}] }

autocomplete set export { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete set !export { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete set unset { [{
    "DynamicDesc": ({ runtime --exports })
}] }

private autocomplete.variables {
    runtime: --globals -> formap k v { out $k }
    runtime: --variables -> formap k v { out $k }
}

test unit private autocomplete.variables {
    "PreBlock": ({ global MUREX_UNIT_TEST=foobar }),
    "PostBlock": ({ !global MUREX_UNIT_TEST }),
    "StdoutRegex": (^([_a-zA-Z0-9]+\n)+),
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    })
}

autocomplete set global { [{
    "Dynamic": ({ autocomplete.variables })
}] }

autocomplete set !global { [{
    "Dynamic": ({ autocomplete.variables })
}] }

autocomplete set set { [{
    "Dynamic": ({ autocomplete.variables })
}] }

autocomplete set !set { [{
    "Dynamic": ({ autocomplete.variables })
}] }

autocomplete set "[" { [{
    "AnyValue": true,
    "AllowMultiple": true,
    "ExecCmdline": true,
    "Dynamic": ({
        switch ${ get-type: stdin } {
            case * {
                #<stdin> -> tabulate -> [ 0: ] -> format json -> [ 0 ]
                <stdin> -> [ 0: ] -> format json -> [ 0 ] -> append "]"
            }

            case csv {
                <stdin> -> [ 0: ] -> format json -> [ 0 ] -> append "]"
            }
            
            case jsonl {
                <stdin> -> [ 0 ] -> set header
                $header -> cast utf8 -> [ 0 -1 ] -> set jsonl_format
                if { = jsonl_format==`[]` } then {
                    tout json $header -> append "]"
                }
            }

            catch {
                <stdin> -> formap k v { out $k } -> cast str -> append "]"
            }
        }
    })
}] }

autocomplete set "[[" { [{
    "AnyValue": true,
    "ExecCmdline": true,
    "AutoBranch": true,
    "Dynamic": ({ -> struct-keys -> append "]]" })
} ]}

private config.get.apps {
    config: -> formap k v { out $k } -> msort
}

autocomplete set config { [{
    "Flags": [ "get", "set", "eval", "define", "default" ],
    "FlagValues": {
        "get": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ config -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) }
            #{ "Dynamic": ({ err $SELF\n$ARGS }) }
        ],               
        "set": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ config -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) },
            { "Dynamic": ({
				switch {
					case { = `${ config -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ Data-Type ]}`==`bool` } {
						ja [true,false]
					}

					case { config -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ <!null> Options ] } {
						config -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ Options ]
					}
					
                	catch {
						out ${ config -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ Default ]}
					}
				}
			}) }
        ],
        "eval": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ config -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) }
        ],
        "default": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ config -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) }
        ]
    }
}] }

autocomplete set !config { [
    { "Dynamic": ({ config.get.apps }) },
    { "Dynamic": ({ source { config } -> [ $ARGS[1] ] -> formap k v { out $k } -> msort }) }
] }

autocomplete set event { [
    {
        "Dynamic": ({ runtime: --events -> formap k v { out $k } })
    }
] }

autocomplete set !event { [
    {
        "Dynamic": ({ runtime: --events -> formap k v { out $k } -> msort })
    },
    {
        "Dynamic": ({ runtime: --events -> [ $ARGS[1] ] -> formap k v { out $k } -> msort })
    }
] }

private autocomplete.alias {
    runtime: --aliases -> formap k v { out $k }
}

test unit private autocomplete.alias {
    "StdoutRegex": (^([-_./a-zA-Z0-9]+\n)+),
	"StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    })
}

autocomplete set !alias { [{
    "Dynamic": ({ autocomplete.alias })
}] }

private autocomplete.functions {
    runtime: --functions -> formap k v { out $k }
}

test unit private autocomplete.functions {
    "StdoutRegex": (^([-_./a-zA-Z0-9]+\n)+),
	"StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    })
}

autocomplete set !func { [{
    "Dynamic": ({ autocomplete.functions })
} ]}

autocomplete set !function { [{
    "Dynamic": ({ autocomplete.functions })
} ]}

autocomplete set autocomplete { [{
    "Flags": [ "get", "set" ],
    "FlagValues": {
        "get": [{
            "Dynamic": ({
                runtime --autocomplete -> formap cmd _ { out $cmd } -> cast str
            })
        }]
    }
}] }

private git-branch {
    git branch -> [ :0 ] -> !match *
}

autocomplete set git { [{
    #"Flags": [ "clone", "init", "add", "mv", "reset", "rm", "bisect", "grep", "log", "show", "status", "branch", "checkout", "commit", "diff", "merge", "rebase", "tag", "fetch", "pull", "push", "stash" ],
    "DynamicDesc": ({
        git: help -a -> @[..^Ancillary]re -> tabulate: --map
    }),
    "ListView": true,
    "FlagValues": {
        "init": [{
            "Flags": ["--bare"]
        }],
        "add": [{
            #"IncFiles": true,
            "AllowMultiple": true,
            "Dynamic": ({
                git status -s -> regexp 'f/^.[^\s] ["]?(.*?)["]?$/' -> cast str
            })
        }],
        "diff": [{
            #"IncFiles": true,
            "AllowMultiple": true,
            "Dynamic": ({
                git status -s -> [:1]
            })
        }],
        "mv": [{ 
            "IncFiles": true
        }],
        "rm": [{
            "IncFiles": true,
            "AllowMultiple": true
        }],
        "checkout": [{
            "Dynamic": ({ git-branch }),
            "Flags": [ "-b" ]
        }],
        "merge": [{
            "Dynamic": ({ git-branch })
        }],
        "commit": [{
            "Flags": ["-a", "-m", "--amend"],
            "FlagValues": {
                "--amend": [{ "AnyValue": true }]
            },
            "AllowMultiple": true
        }]
    }
}] }

autocomplete set docker { [
    {
        "DynamicDesc": ({
            docker help -> @[^Usage:..]re -> tabulate: --split-comma --map
        }),

        #"AllowMultiple": true,
        #"AnyValue": true,
        "ListView": true,

        "FlagValues": {
            "builder": [{
                "DynamicDesc": ({
                    docker help builder -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "config": [{
                "DynamicDesc": ({
                    docker help config -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "container": [{
                "DynamicDesc": ({
                    docker help container -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "context": [{
                "DynamicDesc": ({
                    docker help context -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "image": [{
                "DynamicDesc": ({
                    docker help image -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "network": [{
                "DynamicDesc": ({
                    docker help network -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "node": [{
                "DynamicDesc": ({
                    docker help node -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "plugin": [{
                "DynamicDesc": ({
                    docker help plugin -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "secret": [{
                "DynamicDesc": ({
                    docker help secret -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "service": [{
                "DynamicDesc": ({
                    docker help service -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "stack": [{
                "DynamicDesc": ({
                    docker help stack -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "swarm": [{
                "DynamicDesc": ({
                    docker help swarm -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "system": [{
                "DynamicDesc": ({
                    docker help system -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "trust": [{
                "DynamicDesc": ({
                    docker help trust -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "volume": [{
                "DynamicDesc": ({
                    docker help volume -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }]
        }
    },
    {
        "IncFiles": true
    }
] }

private autocomplete.docker-compose.services {
    open docker-compose.yaml -> [ services ] -> formap k v { out "$k" } -> cast str
}

autocomplete set docker-compose { [{
    "Flags": ["build","bundle","config","create","down","events","exec","help","images","kill","logs","pause","port","ps","pull","push","restart","rm","run","scale","start","stop","top","unpause","up","version"],
    "FlagValues": {
        "build": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "create": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "events": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "exec": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "kill": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "logs": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "pause": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "pull": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "push": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "restart": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "run": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "scale": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "start": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "stop": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "top": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "unpause": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "up": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }]
    }
}] }

autocomplete set terraform { [{
    "Flags": ["apply","console","destroy","env","fmt","get","graph","import","init","output","plan","providers","push","refresh","show","taint","untaint","validate","version","workspace"],
    "FlagValues": {
        "workspace": [
            {
                "Flags": [ "new", "delete", "select", "list", "show" ]
            }
        ]
    }
}] }

autocomplete set gopass { [{
    "Flags": ["--yes","--clip","-c","--help","-h","--version","-v"],
    "AllowMultiple": true,
    "Dynamic": ({ exec: @ARGS --generate-bash-completion }),
    "AutoBranch": true
}] }

autocomplete set debug { [{
    "Flags": ["on", "off"]
}] }



autocomplete: set murex-package {
    [{
        "Flags": [ "install", "update", "import", "enable", "disable", "reload", "status", "list", "cd" ],
        "FlagValues": {
            "import": [{
                "IncFiles": true
            }],
            "enable": [{
                "DynamicDesc": ({ murex-package: list disabled }),
                "ListView": true,
                "AutoBranch": true
            }],
            "disable": [{
                "DynamicDesc": ({ murex-package: list enabled }),
                "ListView": true,
                "AutoBranch": true
            }],
            "list": [{
                "Flags": [ "enabled", "disabled", "packages" ]
            }],
            "cd": [{
                "Dynamic": ({ murex-package: list packages })
            }]
        }
    }]
}

alias builtins=runtime --builtins

config eval shell safe-commands {
    -> alter --merge / ([
        "builtins", "jobs"
    ])
}

!if { man-summary terraform } then {
    summary terraform "Write, Plan, and Create Infrastructure as Code"
}

autocomplete set terraform {[
    {
        "DynamicDesc": ({
            terraform -help @{ $ARGS -> @[1..] } -> tabulate: --map --column-wraps
        }),
        "AllowMultiple": true,
        "ListView": true
    }
]}

!if { man-summary go } then {
    summary go "Go is a tool for managing Go source code"
}

!if { man-summary atom } then {
    summary atom "Github Atom - Text editor / IDE"
}

!if { man-summary code } then {
    summary code "Microsoft Visual Studio Code - Text editor / IDE"
}

autocomplete set zfs {
    [{
        "Dynamic": ({
             zfs ? egrep "^\t[a-z]+" -> regexp 'f/\t+([a-z]+)/' -> uniq 
        })
    }]
}

autocomplete set zpool {
    [{
        "Dynamic": ({
             zpool ? egrep "^\t[a-z]+" -> regexp 'f/\t+([a-z]+)/' -> uniq 
        })
    }]
}