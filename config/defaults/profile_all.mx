func h {
    # Output the murex history log in a human readable format
    history -> foreach { -> set json line; out "$line[Index]: $line[Block]" } -> cast *
}

func aliases {
	# Output the aliases in human readable format
	runtime: --aliases -> formap name alias {
        $name -> sprintf: "%10s => ${esccli @alias}\n"
	} -> cast str
}

test define-unit function aliases {
    "PreBlock": ({
        global ALIAS_UNIT_TEST=${rand: int 9999999999}
        alias $ALIAS_UNIT_TEST=example param1 param2 param3
    }),
    "StdoutRegex": "([- _0-9a-zA-Z]+ => .*?\n)+",
    "StdoutType": "str",
    "PostBlock": ({
        !alias $ALIAS_UNIT_TEST
        !global ALIAS_UNIT_TEST
    })
}

autocomplete set cd { [{
    "IncDirs": true
}] }

autocomplete set mkdir { [{
    "IncDirs": true,
    "AllowMultiple": true
}] }

autocomplete set rmdir { [{
    "IncDirs": true,
    "AllowMultiple": true
}] }

autocomplete set exec { [
    {
        "IncFiles": true,
        "IncDirs": true,
        "IncExePath": true
    },
    {
        "NestedCommand": true
    }
] }

private get.datatypes {
    runtime: --readarray -> format: str
    runtime: --writearray -> format: str
    runtime: --readmap -> format: str
    runtime: --marshallers -> format: str
    runtime: --unmarshallers -> format: str
}

private datatypes {
    get.datatypes -> sort -> uniq -> cast str
}

test define-unit private datatypes {
    "StdoutRegex": "[a-z]+",
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    })
}

autocomplete set cast { [{
    "Dynamic": ({ datatypes })
}] }

autocomplete set tout { [{
    "Dynamic": ({ datatypes })
}] }

autocomplete set set { [{
    "Dynamic": ({ datatypes })
}] }

autocomplete set format { [{
    "Dynamic": ({ runtime: --marshallers })
}] }

autocomplete set swivel-datatype { [{
    "Dynamic": ({ runtime: --marshallers })
}] }

autocomplete set export { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete set !export { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete set unset { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete set global { [{
    "Dynamic": ({ runtime: --variables -> formap k v { out $k } })
}] }

autocomplete set !global { [{
    "Dynamic": ({ runtime: --variables -> formap k v { out $k } })
}] }

autocomplete set set { [{
    "Dynamic": ({ runtime: --variables -> formap k v { out $k } })
}] }

autocomplete set !set { [{
    "Dynamic": ({ runtime: --variables -> formap k v { out $k } })
}] }

autocomplete set "[" { [{
    "AnyValue": true,
    "AllowMultiple": true,
    "ExecCmdline": true,
    "Dynamic": ({
        switch ${ get-type: stdin } {
            case * {
                #<stdin> -> tabulate -> [ 0: ] -> format json -> [ 0 ]
                <stdin> -> [ 0: ] -> format json -> [ 0 ]
            }
            
            case csv {
                <stdin> -> [ 0: ] -> format json -> [ 0 ]
            }
            
            catch {
                <stdin> -> formap k v { out $k } -> cast str -> append "]"
            }
        }
    })
}] }

autocomplete set "[[" { [{
    "AnyValue": true,
    "ExecCmdline": true,
    "AutoBranch": true,
    "Dynamic": ({ -> struct-keys -> append "]]" })
} ]}

private config.get.apps {
    config: -> formap k v { out $k } -> msort
}

#private config.get.keys {
#    config: -> [ ${params->[2]} ] -> formap k v { out $k } -> msort
#}
#
#private config.get.meta {
#    config: -> [ ${params->[2]} ] -> [ ${params->[3]} ] -> [ ${params->[4]} ]
#}

autocomplete set config { [{
    "Flags": [ "get", "set", "eval", "define", "default" ],
    "FlagValues": {
        "get": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ source { config } -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) }
            #{ "Dynamic": ({ err $SELF\n$ARGS }) }
        ],               
        "set": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ source { config } -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) },
            { "Dynamic": ({
				switch {
					case { = `${source { config } -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ Data-Type ]}`==`bool` } {
						ja [true,false]
					}

					case { source { config } -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ <!null> Options ] } {
						source { config } -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ Options ]
					}
					
                	catch {
						out ${source { config } -> [ $ARGS[2] ] -> [ $ARGS[3] ] -> [ Default ]}
					}
				}
			}) }
        ],
        "eval": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ source { config } -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) }
        ],
        "default": [
            { "Dynamic": ({ config.get.apps }) },
            { "Dynamic": ({ source { config } -> [ $ARGS[2] ] -> formap k v { out $k } -> msort }) }
        ]
    }
}] }

autocomplete set !config { [
    { "Dynamic": ({ config.get.apps }) },
    { "Dynamic": ({ source { config } -> [ $ARGS[1] ] -> formap k v { out $k } -> msort }) }
] }

autocomplete set event { [
    {
        "Dynamic": ({ runtime: --events -> formap k v { out $k } })
    }
] }

autocomplete set !event { [
    {
        "Dynamic": ({ runtime: --events -> formap k v { out $k } -> msort })
    },
    {
        "Dynamic": ({ runtime: --events -> [ $ARGS[1] ] -> formap k v { out $k } -> msort })
    }
] }

autocomplete set !alias { [
    {
        "Dynamic": ({ runtime: --aliases -> formap k v { out $k } })
    }
]}

autocomplete set !func { [
    {
        "Dynamic": ({ runtime: --funcs -> formap k v { out $k } })
    }
]}

autocomplete set !function { [
    {
        "Dynamic": ({ runtime: --funcs -> formap k v { out $k } })
    }
]}

autocomplete set autocomplete { [{
    "Flags" : [ "get", "set" ]
}] }

private git-branch {
    git branch -> [ :0 ] -> !match *
}

autocomplete set git { [{
    #"Flags": [ "clone", "init", "add", "mv", "reset", "rm", "bisect", "grep", "log", "show", "status", "branch", "checkout", "commit", "diff", "merge", "rebase", "tag", "fetch", "pull", "push", "stash" ],
    "DynamicDesc": ({
        git help -> tabulate --map
    }),
    #"ListView": true,
    "FlagValues": {
        "init": [{
            "Flags": ["--bare"]
        }],
        "add": [{
            #"IncFiles": true,
            "AllowMultiple": true,
            "Dynamic": ({
                git status -s -> regexp 'm/^( |\?)' -> [:1]
            })
        }],
        "mv": [
            { "IncFiles": true }
        ],
        "rm": [{
            "IncFiles": true,
            "AllowMultiple": true
        }],
        "checkout": [{
            "Dynamic": ({ git-branch }),
            "Flags": [ "-b" ]
        }],
        "merge": [{
            "Dynamic": ({ git-branch })
        }],
        "commit": [{
            "Flags": ["-a", "-m", "--amend"],
            "FlagValues": {
                "--amend": [{ "AnyValue": true }]
            },
            "AllowMultiple": true
        }]
    }
}] }

#autocomplete set docker { [
#    {
#        "Flags": [ "config", "container", "image", "network", "node", "plugin", "secret", "service", "stack", "swarm", "system", "volume", "attach", "build", "commit", "cp", "create", "diff", "events", "exec", "export", "history", "images", "info", "inspect", "kill", "load", "login", "logout", "logs", "pause", "port", "ps", "pull", "push", "rename", "restart", "rm", "rmi", "run", "save", "search", "start", "stats", "stop", "tag", "top", "unpause", "update", "version", "wait" ]
#    },
#    {
#        "Flags": [ "-t" ],
#        "Optional": true,
#        "AllowMultiple": true,
#        "AnyValue": true
#    },
#    {
#        "IncFiles": true
#    }
#] }

autocomplete set docker { [
    {
        "DynamicDesc": ({
            docker help -> @[^Usage:..]re -> tabulate: --split-comma --map
        }),

        #"AllowMultiple": true,
        #"AnyValue": true,
        "ListView": true,

        "FlagValues": {
            "builder": [{
                "DynamicDesc": ({
                    docker help builder -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "config": [{
                "DynamicDesc": ({
                    docker help config -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "container": [{
                "DynamicDesc": ({
                    docker help container -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "context": [{
                "DynamicDesc": ({
                    docker help context -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "image": [{
                "DynamicDesc": ({
                    docker help image -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "network": [{
                "DynamicDesc": ({
                    docker help network -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "node": [{
                "DynamicDesc": ({
                    docker help node -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "plugin": [{
                "DynamicDesc": ({
                    docker help plugin -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "secret": [{
                "DynamicDesc": ({
                    docker help secret -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "service": [{
                "DynamicDesc": ({
                    docker help service -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "stack": [{
                "DynamicDesc": ({
                    docker help stack -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "swarm": [{
                "DynamicDesc": ({
                    docker help swarm -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "system": [{
                "DynamicDesc": ({
                    docker help system -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "trust": [{
                "DynamicDesc": ({
                    docker help trust -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }],

            "volume": [{
                "DynamicDesc": ({
                    docker help volume -> @[^Usage:..]re -> tabulate: --split-comma --map
                })
            }]
        }
    },
    {
        "IncFiles": true
    }
] }

autocomplete set terraform { [{
    "Flags": ["apply","console","destroy","env","fmt","get","graph","import","init","output","plan","providers","push","refresh","show","taint","untaint","validate","version","workspace"],
    "FlagValues": {
        "workspace": [
            {
                "Flags": [ "new", "delete", "select", "list", "show" ]
            }
        ]
    }
}] }

autocomplete set gopass { [{
    "Flags": ["--yes","--clip","-c","--help","-h","--version","-v"],
    "AllowMultiple": true,
    "Dynamic": "{ exec: @{params} --generate-bash-completion }",
    "AutoBranch": true
}] }

autocomplete set debug { [{
    "Flags": ["on", "off"]
}] }

autocomplete: set fid-kill {
    [{
        "DynamicDesc": ({ fid-list: --csv -> [ :0 :8 :9 ] }),
        "ListView": true,
        "AllowMultiple": true
    }]
}

autocomplete: set murex-package {
    [{
        "Flags": [ "install", "update", "import", "enable", "disable", "reload", "status" ],
        "FlagValues": {
            "import": [{
                "IncFiles": true
            }]
        }
    }]
}