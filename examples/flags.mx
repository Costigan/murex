#!/usr/bin/env murex

# First we define what parameters to accept:
# Pass the `args` function a JSON string (because JSON objects share the same braces as murex block, you can enter JSON
# directly as unescaped values as parameters in murex).
#
# `args` will create a murex variable called $ARGS.
#
# --str: str == string data type
# --num: num == numeric data type
# --bool: bool == flag used == true, missing == false
# -b: --bool == alias of --bool flag
args {
    "AllowAdditional": true,
    "Flags": {
        "--str": "str",
        "--num": "num",
        "--bool": "bool",
        "-b": "--bool"
    }
}; catch {
# Lets check for errors in the command line parameters. If they exist then print the error and then exit.
    $ARGS -> [ Error ]
    exit 1
}

out "The structure of \$ARGS is: ${$ARGS->pretty}\n\n"


# Some example usage:
# -------------------

!if { $ARGS->[ Flags ]->[ --bool ] } {
    out "Flag `--bool` was not set."
}

# `<!null>` redirects the STDERR to a named pipe. In this instance it's the 'null' pipe so equivalent to 2>/dev/null
# thus we are just suppressing any error messages.
try <!null> {
    $ARGS -> [ Flags ] -> [ --str ] -> set fStr
    $ARGS -> [ Flags ] -> [ --num ] -> set fNum

} -> catch {
    out "Missing `--str` and/or `--num` flags."

} -> !catch {
    out "Defined Flags:"
    out "  --str == $fStr"
    out "  --num == $fNum"
}

$ARGS -> [ Additional ] -> foreach arg {
    out "Additional argument (ie not assigned to a flag): `$arg`."
}