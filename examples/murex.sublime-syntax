%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions: [mx, murex_profile]
scope: source.mx
contexts:
  main:
    - match: '\\.'
      scope: constant.escaped.mx

    # Strings begin and end with single quotes
    - match: "'"
      scope: punctuation.definition.string.begin.mx
      push: single_quoted_string

    # Strings begin and end with double quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.mx
      push: double_quoted_string

    # Code blocks inside parentheses strings
    - match: '\(\{\s*$'
      #push: braces
      pop: true
      set: main
    #- match: '\(\{\s*(\!?[a-zA-Z0-9_-]+)'
    #  captures:
    #    #1: main
    #    1: keyword.control.mx

    # Strings begin and end with parentheses, and use backslashes as an escape
    # character
    - match: '\('
      scope: punctuation.definition.string.begin.mx
      push: parentheses_string

    # Comments begin with a '#' and finish at the end of the line
    - match: '#'
      scope: punctuation.definition.comment.mx
      push: line_comment

    # Operators and commands
    - match: '(^|->|\||;)\s*(\!?[a-zA-Z0-9_-]+)'
      captures:
        1: constant.operators.mx
        2: keyword.control.mx

    # Start of code block
    - match: '\{\s*(\!?[a-zA-Z0-9_-]+)'
      captures:
        #1: main
        1: keyword.control.mx

    # Other keywords
    - match: '\b(then|else|catch)\b'
      scope: keyword.control.mx

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.mx

    # Variables
    - match: '\$[0-9a-zA-Z_]+'
      scope: variable.other.mx

    # Arrays
    - match: '\s@[0-9a-zA-Z_]+'
      scope: variable.other.mx

    # Operators
    - match: '(->|\|\;)'
      scope: constant.operators.mx

    # Parentheses balancing
    #- match: '\('
    #  push: parentheses
    #- match: '\)'
    #  scope: invalid.illegal.stray-parentheses-end

    # Brace balancing
    #- match: '\{'
    #  push: braces

    #- match: '\}'
    #  scope: invalid.illegal.stray-braces-end

  single_quoted_string:
    - meta_scope: string.quoted.single.mx
    - match: "'"
      scope: punctuation.definition.string.end.mx
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double.mx
    - match: '\\.'
      scope: constant.escaped.mx
    # Variables and arrays
    - match: '[\$@][0-9a-zA-Z_]+'
      scope: variable.other.mx
    # Start of code block
    - match: '(\$|@)\{'
      scope: variable.function
      embed: nested_brace
      embed_scope: variable.function
      escape: '\}'
    - match: '"'
      scope: punctuation.definition.string.end.mx
      pop: true

  parentheses_string:
    - meta_scope: string.quoted.other.mx
    - match: '\('
      scope: punctuation.definition.string.begin.mx
      push: parentheses_string
    - match: '\\.'
      scope: constant.escaped.mx
    # Variables and arrays
    - match: '[\$@][0-9a-zA-Z_]+'
      scope: variable.other.mx
    - match: '\)'
      scope: punctuation.definition.string.end.mx
      pop: true

  line_comment:
    - meta_scope: comment.line.mx
    - match: '$'
      pop: true

  nested_brace:
    - match: '\}'
      scope: variable.function
      pop: true
    - include: main
