- DocumentID: unmarshal
  Title: >-
    `Unmarshal()` 
  CategoryID: apis
  Summary: >-
    Converts a structured file format into structured memory
  Description: |-
    This is a function you would write when programming a _murex_ data-type.
    The unmarshal function takes in a byte slice and returns a Go (golang)
    `type` or `struct` or an error.

    This unmarshaller is then registered to _murex_ inside an `init()` function
    and _murex_ builtins can use that unmarshaller via the `UnmarshalData()`
    API.
  Usage: |-
    Registering unmarshal (for writing builtin data-types)
    
    ```go
    // To avoid data races, this should only happen inside func init()
    define.Unmarshallers["json"] = unmarshal
    ```

    Using an existing unmarshaller (eg inside a builtin command)

    ```go
    // See documentation on define.UnmarshalData for more details
    v, err := define.UnmarshalData(p *lang.Process, dataType string)
    ```
  Examples: |-
    Defining a marshaller for a murex data-type

    ```go
    {{ include "builtins/types/example/unmarshal.go" }}
    ```
  Detail: |-
  Parameters:
  - "`*lang.Process`: Process's runtime state. Typically expressed as the variable `p`"
  Related:
  - marshaldata
  - unmashaldata
  - unmarshal


- DocumentID: unmarshaldata
  Title: >-
    `define.UnmarshalData()` 
  CategoryID: apis
  Summary: >-
    Converts a _murex_ data-type into structured memory
  Description: |-
  Usage: |-
    ```go
    data, err := define.UnmarshalData(p, dataType)
    ```
  Examples: |-
    ```go
    func exampleCommand(p *lang.Process) error {
        data := string `{ "foo": "hello foo", "bar": "hello bar" }`

        dataType := "json"

        v, err := define.UnmarshalData(p, dataType)
        if err != nil {
            return err
        }

        s := fmt.Sprint(v)
        _, err := p.Stdout.Write([]byte(s))
        return err
    }
    ```
  Detail: |-
    Go source file:
    
    ```go
    {{ include "lang/types/define/unmarshal.go" }}
    ```
  Parameters:
  - "`*lang.Process`: Process's runtime state. Typically expressed as the variable `p`"
  - "`string`: _murex_ data type" 
  Related:
  - marshal
  - marshaldata
  - unmarshal